from fastapi import APIRouter, Request, HTTPException, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy import update
from app.models.food_models import Food
from app.database import get_sql_session
from app.models.auth_models import CouponResponse, ScanRequest, ScanResponse, CouponStatusResponse
from app.models.participant_models import Participant
import qrcode
from io import BytesIO
import base64
import json

router = APIRouter()


@router.get("/coupon", response_model=CouponResponse)
async def get_coupon(request: Request, db: AsyncSession = Depends(get_sql_session)):
    """Return user's food coupon data (only if flag=1).
    QR will be generated by frontend (lighter & faster)."""
    user_id = request.session.get("user_id")
    if not user_id:
        raise HTTPException(status_code=401, detail="Not logged in")

    # Get participant
    pid_result = await db.execute(
        select(Participant).where(Participant.user_id == user_id)
    )
    participant = pid_result.scalar_one_or_none()
    if not participant:
        raise HTTPException(status_code=404, detail="Participant not found")

    # Get coupon
    coupon_result = await db.execute(
        select(Food).where(Food.pid == participant.pid)
    )
    coupon = coupon_result.scalar_one_or_none()
    if not coupon:
        raise HTTPException(status_code=404, detail="Coupon not found")

    # Only allow active coupons
    if coupon.flag != 1:
        raise HTTPException(status_code=400, detail="Coupon is not active or already used")

    # âœ… Return raw coupon data only (frontend generates QR)
    return CouponResponse(
        coupon_id=coupon.coupon_id,
        pid=coupon.pid,
        food_preference=coupon.food_preference,
        flag=coupon.flag,
    )


@router.post("/scan-coupon", response_model=ScanResponse)
async def scan_coupon(scan_request: ScanRequest, db: AsyncSession = Depends(get_sql_session)):
    """Scan and process food coupon - changes flag from 1 to 0"""
    try:
        # Parse QR code data from Google Lens scan
        qr_data = json.loads(scan_request.coupon_data)
        coupon_id = qr_data.get("coupon_id")
        pid = qr_data.get("pid")

        if not coupon_id or not pid:
            return ScanResponse(
                success=False,
                message="Invalid QR code data - missing coupon_id or pid"
            )

        # Find the coupon in database
        coupon_result = await db.execute(
            select(Food).where(
                Food.coupon_id == coupon_id,
                Food.pid == pid
            )
        )
        coupon = coupon_result.scalar_one_or_none()

        if not coupon:
            return ScanResponse(
                success=False,
                message=f"Coupon not found for ID: {coupon_id}"
            )

        # Check if coupon is already used
        if coupon.flag == 0:
            return ScanResponse(
                success=False,
                message="Coupon already used",
                pid=pid,
                coupon_id=coupon_id,
                food_preference=coupon.food_preference
            )

        # Update coupon flag to 0 (mark as used)
        await db.execute(
            update(Food)
            .where(Food.coupon_id == coupon_id, Food.pid == pid)
            .values(flag=0)
        )
        await db.commit()

        return ScanResponse(
            success=True,
            message="Coupon successfully redeemed",
            pid=pid,
            coupon_id=coupon_id,
            food_preference=coupon.food_preference
        )

    except json.JSONDecodeError:
        return ScanResponse(
            success=False,
            message="Invalid QR code format - not valid JSON"
        )
    except Exception as e:
        await db.rollback()
        return ScanResponse(
            success=False,
            message=f"Error processing coupon: {str(e)}"
        )


@router.get("/coupon-status", response_model=CouponStatusResponse)
async def get_coupon_status(request: Request, db: AsyncSession = Depends(get_sql_session)):
    """Check if user has an active coupon (flag=1)"""
    user_id = request.session.get("user_id")
    if not user_id:
        raise HTTPException(status_code=401, detail="Not logged in")

    # Get participant
    pid_result = await db.execute(select(Participant).where(Participant.user_id == user_id))
    participant = pid_result.scalar_one_or_none()
    if not participant:
        raise HTTPException(status_code=404, detail="Participant not found")

    # Get coupon
    coupon_result = await db.execute(select(Food).where(Food.pid == participant.pid))
    coupon = coupon_result.scalar_one_or_none()

    if not coupon:
        return CouponStatusResponse(
            has_active_coupon=False,
            message="No coupon found for this participant"
        )

    has_active = coupon.flag == 1

    return CouponStatusResponse(
        has_active_coupon=has_active,
        coupon_id=coupon.coupon_id if has_active else None,
        food_preference=coupon.food_preference if has_active else None,
        message="Active coupon available" if has_active else "Coupon already used or inactive"
    )


# Additional endpoint to manually reset coupon for testing (optional)
@router.post("/reset-coupon")
async def reset_coupon(request: Request, db: AsyncSession = Depends(get_sql_session)):
    """Reset coupon flag to 1 for testing purposes"""
    user_id = request.session.get("user_id")
    if not user_id:
        raise HTTPException(status_code=401, detail="Not logged in")

    # Get participant
    pid_result = await db.execute(select(Participant).where(Participant.user_id == user_id))
    participant = pid_result.scalar_one_or_none()
    if not participant:
        raise HTTPException(status_code=404, detail="Participant not found")

    # Reset coupon flag to 1
    result = await db.execute(
        update(Food)
        .where(Food.pid == participant.pid)
        .values(flag=1)
    )

    if result.rowcount == 0:
        raise HTTPException(status_code=404, detail="No coupon found to reset")

    await db.commit()

    return {"message": "Coupon reset successfully", "flag": 1}